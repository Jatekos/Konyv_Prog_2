<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
         <programlisting language="c++">
            <![CDATA[
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <ctime>

class ElsoOsztajom
{
private:
    bool letezikKovVeletlen;
    double kovVeletlen;
public:
    ElsoOsztajom();
    ~ElsoOsztajom();

    double veletlen();
};

ElsoOsztajom::ElsoOsztajom()
{
    letezikKovVeletlen=false;
}

ElsoOsztajom::~ElsoOsztajom()
{
}

double ElsoOsztajom::veletlen()
{
    if (letezikKovVeletlen)
    {
        letezikKovVeletlen =false;
        return kovVeletlen;
    }
    else
    {
        double u1, u2, v1, v2, w;
        do 
        {
            u1=std::rand()/(RAND_MAX+1.0);
            u2=std::rand()/(RAND_MAX+1.0);
            v1=2*u1-1;
            v2=2*u2-1;
            w=v1*v1+v2*v2;
        }
        while (w>1);
        double r =std::sqrt((-2*std::log(w))/w);
        
        kovVeletlen=r*v2;
        letezikKovVeletlen =true;
        
        return r*v1;
    }
    

}

int main(){
    double j=0;
    ElsoOsztajom r;
    for (int i=0; i<5; i++)
    {
        j=r.veletlen();
        std::cout<<j<<std::endl;
    }
   
}]]>
        </programlisting>
        <para>
            Egy osztályt hoztam létre aminek a véletlen fugavénye vissza ad  egy véletlen számot.
De mind ezek mellet mivel ez egy költséges feladat így a helyet, hogy minden hívásnál újra számolnánk a függvény értékét az első hívásnál két értéket határozunk meg az egyiket vissza agyuk a másikat pedig el raktározzuk. A következő hívásnál a második értéket adjuk vissza így nem kel várnunk a számításra hanem egyből meg kapjuk a véletlen értéket. Ehhez nagyon hasonló módszert használtak a Sun programozói a JDK forrásban 
        </para>   
         <programlisting language="java">
          <![CDATA[  if (haveNextNextGaussian) {
            haveNextNextGaussian = false;
            return nextNextGaussian;
        } else {
            double v1, v2, s;
            do {
                v1 = 2 * nextDouble() - 1; // between -1 and 1
                v2 = 2 * nextDouble() - 1; // between -1 and 1
                s = v1 * v1 + v2 * v2;
            } while (s >= 1 || s == 0);
            double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
            nextNextGaussian = v2 * multiplier;
            haveNextNextGaussian = true;
            return v1 * multiplier;
        }
    }
          ]]>
        </programlisting>           
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Magyarázó videó: <link xlink:href=" https://www.youtube.com/watch?v=W-z3OBj3gI0"> https://www.youtube.com/watch?v=W-z3OBj3gI0</link>              
        </para>
        <para>
            Megoldás forrása:                
        </para>
      <para>
        <programlisting language="c++">
          <![CDATA[#include <iostream>
#include <random>
#include <functional>
#include <chrono>

class Unirand {

    private:
        std::function <int()> random;

    public:
        Unirand(long seed, int min, int max): random(
            std::bind(
                std::uniform_int_distribution<>(min, max),
                std::default_random_engine(seed) 
            )
        ){}    

   int operator()(){return random();}
        
};

template <typename ValueType>
class BinRandTree {

protected:
    class Node {
        
    private:
        ValueType value;
        Node *left;
        Node *right;
        int count{0};
        
        // TODO rule of five
        Node(const Node &);
        Node & operator=(const Node &);
        Node(Node &&);
        Node & operator=(Node &&);
        
    public:
        Node(ValueType value, int count=0): value(value), count(count), left(nullptr), right(nullptr) {}
        ValueType getValue() const {return value;}
        Node * leftChild() const {return left;}
        Node * rightChild() const {return right;}
        void leftChild(Node * node){left = node;}
        void rightChild(Node * node){right = node;}
        int getCount() const {return count;}
        void incCount(){++count;}        
    };

    Node *root;
    Node *treep;    
    int depth{0};
    
private:     
    // TODO rule of five
    
public:
    BinRandTree(Node *root = nullptr, Node *treep = nullptr): root(root), treep(treep) {
        std::cout << "BT ctor" << std::endl;        
    }
    
    BinRandTree(const BinRandTree & old) {
        std::cout << "BT copy ctor" << std::endl;
        
        root = cp(old.root, old.treep);
        
    }
    
    Node * cp(Node *node, Node *treep) 
    {
        Node * newNode = nullptr;
        
        if(node)
        {
            newNode = new Node(node->getValue(),node->getCount());
            
            newNode->leftChild(cp(node->leftChild(), treep));            
            newNode->rightChild(cp(node->rightChild(), treep));
            
            if(node == treep)
                this->treep = newNode;
        }
        
        return newNode;
    }
    
    
    BinRandTree & operator=(const BinRandTree & old) {
        std::cout << "BT copy assign" << std::endl;
        
        BinRandTree tmp{old};
        std::swap(*this, tmp);
        return *this;
    }
    
    BinRandTree(BinRandTree && old) {
        std::cout << "BT move ctor" << std::endl;
        
        root = nullptr;
        *this = std::move(old);
    }
       
    BinRandTree & operator=(BinRandTree && old) {
        std::cout << "BT move assign" << std::endl;
        
        std::swap(old.root, root);
        std::swap(old.treep, treep);
        
        return *this;
    }
    
    ~BinRandTree(){
        std::cout << "BT dtor" << std::endl;
        deltree(root);
    }
    BinRandTree & operator<<(ValueType value);
    void print(){print(root, std::cout);}
    void printr(){print(*root, std::cout);}
    void print(Node *node, std::ostream & os);
    void print(const Node &cnode, std::ostream & os);
    void deltree(Node *node); 

    Unirand ur{std::chrono::system_clock::now().time_since_epoch().count(), 0, 2};

    int whereToPut() {
        
            return ur();
    }
    
    
};


template <typename ValueType>
class BinSearchTree : public BinRandTree<ValueType> {

public:
    BinSearchTree() {}
    BinSearchTree & operator<<(ValueType value);
    
    
};

template <typename ValueType, ValueType vr, ValueType v0>
class ZLWTree : public BinRandTree<ValueType> {

public:
    ZLWTree(): BinRandTree<ValueType>(new typename BinRandTree<ValueType>::Node(vr)) {
        this->treep = this->root;
    }
    ZLWTree & operator<<(ValueType value);
    
    
};

template <typename ValueType>
BinRandTree<ValueType> & BinRandTree<ValueType>::operator<<(ValueType value)
{
    
    int rnd = whereToPut();
    
    if(!treep) {
       
        root = treep = new Node(value);
        
    } else if (treep->getValue() == value) {
        
        treep->incCount();
        
    } else if (!rnd) {
 
        treep = root;
        *this << value;
        
    } else if (rnd == 1) {
        
        if(!treep->leftChild()) {
            
            treep->leftChild(new Node(value));
            
        } else {
            
            treep = treep->leftChild();
            *this << value;
        }
        
    } else if (rnd == 2) {
        
        if(!treep->rightChild()) {
            
            treep->rightChild(new Node(value));
            
        } else {
            
            treep = treep->rightChild();
            *this << value;
        }
        
    }
        
    return *this;
}


template <typename ValueType>
BinSearchTree<ValueType> & BinSearchTree<ValueType>::operator<<(ValueType value)
{
    if(!this->treep) {
       
        this->root = this->treep = new typename BinRandTree<ValueType>::Node(value);
        
    } else if (this->treep->getValue() == value) {
        
        this->treep->incCount();
        
    } else if (this->treep->getValue() > value) {
        
        if(!this->treep->leftChild()) {
            
            this->treep->leftChild(new typename BinRandTree<ValueType>::Node(value));
            
        } else {
            
            this->treep = this->treep->leftChild();
            *this << value;
        }
        
    } else if (this->treep->getValue() < value) {
        
        if(!this->treep->rightChild()) {
            
            this->treep->rightChild(new typename BinRandTree<ValueType>::Node(value));
            
        } else {
            
            this->treep = this->treep->rightChild();
            *this << value;
        }
        
    }
    
    this->treep = this->root;
    
    return *this;
}


template <typename ValueType, ValueType vr, ValueType v0>
ZLWTree<ValueType, vr, v0> & ZLWTree<ValueType, vr, v0>::operator<<(ValueType value)
{
    
    if(value == v0) {
        
        if(!this->treep->leftChild()) {
            
            typename BinRandTree<ValueType>::Node * node = new typename BinRandTree<ValueType>::Node(value);
            this->treep->leftChild(node);
            this->treep = this->root;
            
        } else {
            
            this->treep = this->treep->leftChild(); 
        }
        
    } else {

        if(!this->treep->rightChild()) {
            
            typename BinRandTree<ValueType>::Node * node = new typename BinRandTree<ValueType>::Node(value);
            this->treep->rightChild(node);
            this->treep = this->root;
            
        } else {
            
            this->treep = this->treep->rightChild(); 
        }
        
    }
    
    return *this;
}

template <typename ValueType>
void BinRandTree<ValueType>::print(Node *node, std::ostream & os) 
{
    if(node)
    {
        ++depth;
        print(node->leftChild(), os);
        
        for(int i{0}; i<depth; ++i)
            os << "---";            
        os << node->getValue() << " " << depth << " " << node->getCount() << std::endl;     
        
        print(node->rightChild(), os);
        --depth;
    }
    
}


template <typename ValueType>
void BinRandTree<ValueType>::print(const Node &node, std::ostream & os) 
{

        ++depth;
        
        if(node.leftChild())
            print(*node.leftChild(), os);
        
        for(int i{0}; i<depth; ++i)
            os << "---";            
        os << node.getValue() << " " << depth << " " << node.getCount() << std::endl;     
        
        if(node.rightChild())
            print(*node.rightChild(), os);
        
        --depth;
    
}


template <typename ValueType>
void BinRandTree<ValueType>::deltree(Node *node) 
{
    if(node)
    {
        deltree(node->leftChild());
        deltree(node->rightChild());
        
        delete node;
    }
    
}


BinRandTree<int> bar()
{    
    BinRandTree<int> bt;
    BinRandTree<int> bt2;

    Unirand r(0, 0, 1);
    
    bt << 0 << 0 << 0;
    bt2 << 1 << 1 << 1;
    bt.print();
    std::cout << " --- " << std::endl;
    bt2.print();
    
    
    return r()?bt:bt2;
}



BinRandTree<int> foo()
{    
    return BinRandTree<int>();
}


int main(int argc, char** argv, char ** env)
{
	BinRandTree<int> bt;
    std::cout << " *** " << std::endl;
	BinRandTree<int> bt2{ bt };
    std::cout << " *** " << std::endl;
    bt2.print();
	bt2 = bt;

    
    
/*    
    std::cout << std::endl;

    ZLWTree<char, '/', '0'> zt;

    zt <<'0'<<'1'<<'0'<<'0'<<'1' << '1';
    
    zt.print();

    ZLWTree<char, '/', '0'> zt2{zt};

    ZLWTree<char, '/', '0'> zt3;

    zt3 <<'1'<<'1'<<'1'<<'1'<<'1';

    std::cout << "***" << std::endl;
    zt = zt3;
    std::cout << "***" << std::endl;

    ZLWTree<char, '/', '0'> zt4 = std::move(zt2);

    BinSearchTree<std::string> bts;
    
    bts << "alma" << "korte" << "banan" << "korte";
    
    bts.print();
*/    
        
}]]>
        </programlisting>
      </para>
    </section>
 
                   

</chapter>                
